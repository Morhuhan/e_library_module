/* =======================================================
   A.  Подготовка (убираем дубликаты, сохранённые триггеры)
   =======================================================*/
DROP TRIGGER IF EXISTS tr_prevent_book_deletion_if_borrowed      ON public.book;
DROP TRIGGER IF EXISTS tr_prevent_book_copy_deletion_if_borrowed ON public.book_copy;

-- Функции-стражи остаются (переиспользуем ниже)

-- Избыточные копии таблиц (если остались после тестов) удаляем:
DROP TABLE IF EXISTS public.author          CASCADE;
DROP TABLE IF EXISTS public.bbk             CASCADE;
DROP TABLE IF EXISTS public.udc             CASCADE;
DROP TABLE IF EXISTS public.book            CASCADE;
DROP TABLE IF EXISTS public.book_author     CASCADE;
DROP TABLE IF EXISTS public.book_bbk        CASCADE;
DROP TABLE IF EXISTS public.book_bbk_raw    CASCADE;
DROP TABLE IF EXISTS public.book_copy       CASCADE;
DROP TABLE IF EXISTS public.book_udc        CASCADE;
DROP TABLE IF EXISTS public.book_udc_raw    CASCADE;
DROP TABLE IF EXISTS public.book_pub_place  CASCADE;
DROP TABLE IF EXISTS public.publisher       CASCADE;
DROP TABLE IF EXISTS public.borrow_record   CASCADE;
-- Служебные таблицы
DROP TABLE IF EXISTS public.roles           CASCADE;
DROP TABLE IF EXISTS public.users           CASCADE;
DROP TABLE IF EXISTS public.person          CASCADE;
-- Новые (если существовали после предыдущих экспериментов)
DROP TABLE IF EXISTS public.student         CASCADE;
DROP TABLE IF EXISTS public."group"         CASCADE;

/* =======================================================
   B.  Актуальная схема библиотеки
   =======================================================*/

-- 0. Расширения
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- 1. Служебные справочники
CREATE TABLE public.roles (
    id   SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE NOT NULL
);

CREATE TABLE public.users (
    id       SERIAL PRIMARY KEY,
    username VARCHAR(255) UNIQUE NOT NULL,
    pass     VARCHAR(255)      NOT NULL,
    role_id  INT NOT NULL REFERENCES public.roles(id)
);

CREATE TABLE public.person (
    id          SERIAL PRIMARY KEY,
    first_name  VARCHAR(255) NOT NULL,
    last_name   VARCHAR(255) NOT NULL,
    patronymic VARCHAR(255),

    /* — новые поля — */
    sex        VARCHAR(1) NOT NULL,
    birthday   DATE NOT NULL,
    inn        BIGINT,
    snils      VARCHAR(14),
    email      VARCHAR(255),
    military   VARCHAR(50)
);


-- 2. Классификационные справочники
CREATE TABLE public.bbk (
    id          SERIAL PRIMARY KEY,
    bbk_abb     TEXT UNIQUE NOT NULL,
    description TEXT
);

CREATE TABLE public.udc (
    id          SERIAL PRIMARY KEY,
    udc_abb     TEXT UNIQUE NOT NULL,
    description TEXT
);

-- 3. Книги • авторы • экземпляры
CREATE TABLE public.book (
    id                SERIAL PRIMARY KEY,
    title             TEXT,
    "type"            TEXT,
    edit              TEXT,
    edition_statement TEXT,
    phys_desc         TEXT,
    series            TEXT
);

/* --- author ------------------------------------------ */
CREATE TABLE public.author (
    id          SERIAL PRIMARY KEY,
    last_name   TEXT,
    first_name  TEXT,      
    patronymic TEXT,
    birth_year  INT,
    CONSTRAINT author_unique_combination
        UNIQUE (last_name, first_name, patronymic, birth_year)
);
/* ----------------------------------------------------- */

CREATE TABLE public.book_author (
    book_id   INT NOT NULL REFERENCES public.book(id)   ON DELETE CASCADE,
    author_id INT NOT NULL REFERENCES public.author(id) ON DELETE CASCADE,
    PRIMARY KEY (book_id, author_id)
);


CREATE TABLE public.book_copy (
    id             SERIAL PRIMARY KEY,
    book_id        INT NOT NULL REFERENCES public.book(id) ON DELETE CASCADE,

    -- новые нормализованные данные экземпляра
    inventory_no   TEXT      NOT NULL,
    receipt_date   DATE,
    storage_place  TEXT,
    price          NUMERIC(12,2),

    -- целостность: один и тот же инв. номер не должен повторяться для одной книги
    UNIQUE (book_id, inventory_no)
);

-- 4. RAW-таблицы (данные из парсера, без ссылочной целостности)
CREATE TABLE public.book_bbk_raw (
    book_id  INT  NOT NULL REFERENCES public.book(id) ON DELETE CASCADE,
    bbk_code TEXT NOT NULL,
    PRIMARY KEY (book_id, bbk_code)
);

CREATE TABLE public.book_udc_raw (
    book_id  INT  NOT NULL REFERENCES public.book(id) ON DELETE CASCADE,
    udc_code TEXT NOT NULL,
    PRIMARY KEY (book_id, udc_code)
);

-- 5. Валидные многие-ко-многим
CREATE TABLE public.book_bbk (
    book_id INT NOT NULL REFERENCES public.book(id) ON DELETE CASCADE,
    bbk_id  INT NOT NULL REFERENCES public.bbk(id)  ON DELETE CASCADE,
    PRIMARY KEY (book_id, bbk_id)
);

CREATE TABLE public.book_udc (
    book_id INT NOT NULL REFERENCES public.book(id) ON DELETE CASCADE,
    udc_id  INT NOT NULL REFERENCES public.udc(id)  ON DELETE CASCADE,
    PRIMARY KEY (book_id, udc_id)
);

-- 6. Публикационные сведения
CREATE TABLE public.publisher (
    id   SERIAL PRIMARY KEY,
    name TEXT UNIQUE NOT NULL
);

CREATE TABLE public.book_pub_place (
    id           SERIAL PRIMARY KEY,
    book_id      INT NOT NULL REFERENCES public.book(id)      ON DELETE CASCADE,
    publisher_id INT     REFERENCES public.publisher(id),
    city         TEXT,
    pub_year     INT,
);

-- 7. Учёт выдач
CREATE TABLE public.borrow_record (
    id                  SERIAL PRIMARY KEY,
    book_copy_id        INT NOT NULL REFERENCES public.book_copy(id) ON DELETE CASCADE,
    person_id           INT NOT NULL REFERENCES public.person(id) ON DELETE CASCADE,
    borrow_date         DATE DEFAULT CURRENT_DATE,
    due_date            DATE,
    return_date         DATE,
    expected_return_date DATE DEFAULT CURRENT_DATE + INTERVAL '1 year',
    issued_by_user_id   INT NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    accepted_by_user_id INT REFERENCES public.users(id) ON DELETE CASCADE,
    CONSTRAINT chk_return_consistency
        CHECK (
            (accepted_by_user_id IS NULL AND return_date IS NULL)
            OR
            (accepted_by_user_id IS NOT NULL AND return_date IS NOT NULL)
        )
);

CREATE UNIQUE INDEX idx_borrowrecord_unique_open
    ON public.borrow_record (book_copy_id)
    WHERE return_date IS NULL;

-- 8. Триггеры &laquo;не удалять, если выдано&raquo;
CREATE OR REPLACE FUNCTION public.prevent_book_deletion_if_borrowed()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
    IF EXISTS (
        SELECT 1
          FROM public.book_copy bc
          JOIN public.borrow_record br
            ON br.book_copy_id = bc.id
         WHERE bc.book_id = OLD.id
           AND br.return_date IS NULL
    ) THEN
        RAISE EXCEPTION 'Нельзя удалить книгу (id=%) — имеются выданные экземпляры.', OLD.id;
    END IF;
    RETURN OLD;
END;
$$;

CREATE OR REPLACE FUNCTION public.prevent_book_copy_deletion_if_borrowed()
RETURNS TRIGGER LANGUAGE plpgsql AS $$
BEGIN
    IF EXISTS (
        SELECT 1
          FROM public.borrow_record br
         WHERE br.book_copy_id = OLD.id
           AND br.return_date IS NULL
    ) THEN
        RAISE EXCEPTION 'Нельзя удалить экземпляр книги (copy id=%) — он выдан.', OLD.id;
    END IF;
    RETURN OLD;
END;
$$;

CREATE TRIGGER tr_prevent_book_deletion_if_borrowed
    BEFORE DELETE ON public.book
    FOR EACH ROW EXECUTE FUNCTION public.prevent_book_deletion_if_borrowed();

CREATE TRIGGER tr_prevent_book_copy_deletion_if_borrowed
    BEFORE DELETE ON public.book_copy
    FOR EACH ROW EXECUTE FUNCTION public.prevent_book_copy_deletion_if_borrowed();

/* =======================================================
   Готово!
   =======================================================*/